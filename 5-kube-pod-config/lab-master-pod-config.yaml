# lab

# Get the IP address of the Kubernetes master using the AWS CLI
master_ip=$(aws ec2 describe-instances \
  --region=us-west-2 \
  --filters "Name=tag:Name,Values=k8s-master" \
  --query "Reservations[0].Instances[0].PrivateIpAddress" \
  --output text)
# Securely copy the kubeonfig file
scp -o "ForwardAgent yes" ubuntu@$master_ip:~/kubeconfig ~/.kube/config

# Load completions
source <(kubectl completion bash)
# Download and install Metrics Server
wget -qO /tmp/metrics-server.zip https://github.com/cloudacademy/metrics-server/archive/master.zip
sudo apt install unzip && \
  unzip -q -d /tmp /tmp/metrics-server.zip && \
  kubectl create -f /tmp/metrics-server-master/deploy/1.8+/

cat << 'EOF' > load.yaml
apiVersion: v1
kind: Pod
metadata:
  name: load
spec:
  containers:
  - name: cpu-load
    image: vish/stress
    args:
    - -cpus
    - "2"
EOF

kubectl create -f load.yaml

kubectl top pods
kubectl top nodes

cat << 'EOF' > load-limited.yaml
apiVersion: v1
kind: Pod
metadata:
  name: load-limited
spec:
  containers:
  - name: cpu-load-limited
    image: vish/stress
    args:
    - -cpus
    - "2"
    resources:
      limits:
        cpu: "0.5" # half a core
        memory: "20Mi" # 20 mebibytes 
      requests:
        cpu: "0.25" # quarter of a core
        memory: "10Mi" # 20 mebibytes
EOF

kubectl create -f load-limited.yaml

kubectl top pods
kubectl top nodes

kubectl delete -f load.yaml
kubectl delete -f load-limited.yaml

# securityContext

kubectl explain pod.spec.securityContext
kubectl explain pod.spec.containers.securityContext

cat << EOF > pod-no-security-context.yaml
apiVersion: v1
kind: Pod
metadata:
  name: security-context-test-1
spec:
  containers:
  - image: busybox:1.30.1
    name: busybox
    args:
    - sleep
    - "3600"
EOF

kubectl create -f pod-no-security-context.yaml
kubectl exec security-context-test-1 -it -- ls /dev

kubectl delete -f pod-no-security-context.yaml

cat > pod-privileged.yaml <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: security-context-test-2
spec:
  containers:
  - image: busybox:1.30.1
    name: busybox
    args:
    - sleep
    - "3600"
    securityContext:
      privileged: true
EOF

kubectl create -f pod-privileged.yaml
kubectl exec security-context-test-2 -it -- ls /dev

kubectl delete -f pod-privileged.yaml

cat << EOF > pod-runas.yaml
apiVersion: v1
kind: Pod
metadata:
  name: security-context-test-3
spec:
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
  containers:
  - image: busybox:1.30.1
    name: busybox
    args:
    - sleep
    - "3600"
    securityContext:
      runAsUser: 2000
      readOnlyRootFilesystem: true
EOF

kubectl create -f pod-runas.yaml
kubectl exec security-context-test-3 -it -- /bin/sh
ps
touch /tmp/test-file
exit

# A best practice is to use volumes to mount any files that require modification, 
# allowing the root file system to be read-only.

kubectl delete -f pod-runas.yaml

# Volumes

# Create namespace
kubectl create namespace persistence
# Set namespace as the default for the current context
kubectl config set-context $(kubectl config current-context) --namespace=persistence

cat << 'EOF' > pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: db-data
spec:
  # Only one node can mount the volume in Read/Write
  # mode at a time
  accessModes:
  - ReadWriteOnce 
  resources:
    requests:
      storage: 2Gi
EOF

kubectl create -f pvc.yaml

kubectl get pvc
kubectl get pv

cat << 'EOF' > db.yaml
apiVersion: v1
kind: Pod
metadata:
  name: db 
spec:
  containers:
  - image: mongo:4.0.6
    name: mongodb
    # Mount as volume 
    volumeMounts:
    - name: data
      mountPath: /data/db
    ports:
    - containerPort: 27017
      protocol: TCP
  volumes:
  - name: data
    # Declare the PVC to use for the volume
    persistentVolumeClaim:
      claimName: db-data
EOF

kubectl create -f db.yaml

kubectl exec db -it -- mongo testdb --quiet --eval \
  'db.messages.insert({"message": "I was here"}); db.messages.findOne().message'

kubectl delete -f db.yaml
kubectl create -f db.yaml
kubectl exec db -it -- mongo testdb --quiet --eval 'db.messages.findOne().message'

# ConfigMaps

# Create namespace
kubectl create namespace configmaps
# Set namespace as the default for the current context
kubectl config set-context $(kubectl config current-context) --namespace=configmaps

kubectl create configmap app-config --from-literal=DB_NAME=testdb \
  --from-literal=COLLECTION_NAME=messages

kubectl get configmaps app-config -o yaml

cat << 'EOF' > pod-configmap.yaml
apiVersion: v1
kind: Pod
metadata:
  name: db 
spec:
  containers:
  - image: mongo:4.0.6
    name: mongodb
    # Mount as volume 
    volumeMounts:
    - name: config
      mountPath: /config
    ports:
    - containerPort: 27017
      protocol: TCP
  volumes:
  - name: config
    # Declare the configMap to use for the volume
    configMap:
      name: app-config
EOF

kubectl create -f pod-configmap.yaml

kubectl exec db -it -- ls /config
kubectl exec db -it -- cat /config/DB_NAME && echo

# kubectl explain pod.spec.containers.envFrom.configMapRef

# Secrets

# Create namespace
kubectl create namespace secrets
# Set namespace as the default for the current context
kubectl config set-context $(kubectl config current-context) --namespace=secrets

kubectl create secret generic app-secret --from-literal=password=123457

kubectl get secret app-secret -o yaml

kubectl get secret app-secret -o jsonpath="{.data.password}" \
  | base64 --decode \
  && echo

cat << EOF > pod-secret.yaml 
apiVersion: v1
kind: Pod
metadata:
  name: pod-secret
spec:
  containers:
  - image: busybox:1.30.1
    name: busybox
    args:
    - sleep
    - "3600"
    env:
    - name: PASSWORD      # Name of environment variable
      valueFrom:
        secretKeyRef:
          name: app-secret  # Name of secret
          key: password     # Name of secret key
EOF

kubectl create -f pod-secret.yaml

kubectl exec pod-secret -- /bin/sh -c 'echo $PASSWORD'

# ServiceAccounts

# Create namespace
kubectl create namespace serviceaccounts
# Set namespace as the default for the current context
kubectl config set-context $(kubectl config current-context) --namespace=serviceaccounts

kubectl get sa -n serviceaccounts

kubectl run default-pod --generator=run-pod/v1 --image=mongo:4.0.6 
kubectl get pod default-pod -o yaml | more 

kubectl create serviceaccount app-sa

cat << 'EOF' > pod-custom-sa.yaml
apiVersion: v1
kind: Pod
metadata:
  name: custom-sa-pod 
spec:
  containers:
  - image: mongo:4.0.6
    name: mongodb
  serviceAccount: app-sa
EOF

kubectl create -f pod-custom-sa.yaml

# --dry-run -o yaml
# kubectl run default-pod --generator=run-pod/v1 --image=mongo:4.0.6 --serviceaccount=app-sa --dry-run -o yaml

kubectl get pod custom-sa-pod -o yaml | more

kubectl get secrets

