# lab

# There are two categories of users in Kubernetes: normal users and service accounts.
# Normal users represent humans using Kubernetes. 
# Service accounts represent identities used by processes running in pods and managed by Kubernetes. 

Kubernetes supports authentication using:

x509 certificates
Bearer tokens
Basic authentication (usernames and passwords)
OpenID Connect (OIDC) tokens (currently limited support)

# Kubernetes can also integrate with LDAP, SAML, and other authentication protocols by using plugins.
# OpenSSL, easy-rsa, cfssl

master_ip=$(aws ec2 describe-instances --region us-west-2 \
 --filters "Name=tag:Name,Values=k8s-master" \
 --query "Reservations[*].Instances[*].PrivateIpAddress" \
 --output text)  # get the master's IP address using the AWS CLI
ssh $master_ip

echo "source <(kubectl completion bash)" >> ~/.bashrc
source ~/.bashrc

# Create a private key for a new Kubernetes user named Andy
mkdir certs  # create certificate directory
openssl genrsa -out certs/andy.key 2048  # generate private key
chmod 400 certs/andy.key  # make the key read-only by file owner

# to create a certificate signing request (CSR) for a new user named Andy
# that is a member of the network-admin group
openssl req -new -key certs/andy.key -out certs/andy.csr -subj "/CN=andy/O=network-admin"

# Common names (/CN) are mapped to the name of users
# Organizations (/O) are mapped to the name of groups

# Create a Kubernetes certificate signing request resource file
cat > certs/andy-csr.k8s <<EOF
apiVersion: certificates.k8s.io/v1beta1
kind: CertificateSigningRequest
metadata:
  name: new-user-request
spec:
  request: $(cat certs/andy.csr | base64 | tr -d '\n')
  usages:
  - digital signature
  - key encipherment
  - client auth
EOF

kubectl create -f certs/andy-csr.k8s

kubectl get csr

# Approve the CSR to generate the signed certificate
kubectl certificate approve new-user-request

# Confirm the CSR has been approved
kubectl get csr

# Extract the certificate from the CSR resource object and save it to a file
kubectl get csr new-user-request -o jsonpath='{.status.certificate}' \
  | base64 --decode > certs/andy.crt

# The certificate value must be base64 decoded.

# Print the certificate in text form
openssl x509 -noout -text -in certs/andy.crt

rm certs/andy.csr certs/andy-csr.k8s

# Create kubectl credentials for the new user
kubectl config set-credentials andy \
  --client-certificate=certs/andy.crt \
  --client-key=certs/andy.key \
  --embed-certs

# Create a new network admin context using the new user
kubectl config set-context network-admin --cluster=kubernetes --user=andy

# Use the network-admin context
kubectl config use-context network-admin

# Attempt to list the network policies in the default namespace
kubectl get networkpolicy

# Return to the admin context
kubectl config use-context kubernetes-admin@kubernetes
kubectl get networkpolicy

# Kubernetes supports several Authorization modules. 
# Node, ABAC, RBAC, Webhook

# kubectl explain clusterrolebinding.subjects
kubectl get rolebinding --all-namespaces
kubectl get clusterrolebinding
kubectl get clusterrolebinding cluster-admin -o yaml
kubectl describe clusterrole cluster-admin
kubectl describe clusterrole admin
kubectl get clusterrole cluster-admin -o yaml

# Send an authenticated request to the secure API server endpoint
api_endpoint=$(kubectl get endpoints kubernetes | tail -1 | awk '{print "https://" $2}')
sudo curl \
  --cacert /etc/kubernetes/pki/ca.crt \
  --cert /etc/kubernetes/pki/apiserver-kubelet-client.crt \
  --key /etc/kubernetes/pki/apiserver-kubelet-client.key \
  $api_endpoint

# sudo more /etc/kubernetes/manifests/kube-apiserver.yaml
# kubectl api-versions

# Send a request for the authorization API Group
sudo curl \
  --cacert /etc/kubernetes/pki/ca.crt \
  --cert /etc/kubernetes/pki/apiserver-kubelet-client.crt \
  --key /etc/kubernetes/pki/apiserver-kubelet-client.key \
  $api_endpoint/apis/authorization.k8s.io

# Send a request for version v1 of the core API Group (/api)
sudo curl \
  --cacert /etc/kubernetes/pki/ca.crt \
  --cert /etc/kubernetes/pki/apiserver-kubelet-client.crt \
  --key /etc/kubernetes/pki/apiserver-kubelet-client.key \
  $api_endpoint/api/v1 \
  | more

# It can also be helpful to use kubectl with maximum verbosity (--v=9) 
# you can use the /swaggerapi path. Swagger is a framework for building and documenting APIs.

# Send a request for version v1 of the core API using the /swaggerapi path
sudo curl \
  --cacert /etc/kubernetes/pki/ca.crt \
  --cert /etc/kubernetes/pki/apiserver-kubelet-client.crt \
  --key /etc/kubernetes/pki/apiserver-kubelet-client.key \
  $api_endpoint/swaggerapi/api/v1 > swagger.txt

# You can use the /swagger.json path in a similar fashion. 
# It includes all the API Groups in a single 26 MB file. 

# Create a cluster role resource file for network administration
cat > network-admin-role.yaml <<EOF
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: network-admin
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - '*'
- apiGroups:
  - extensions
  resources:
  - networkpolicies
  verbs:
  - '*'
EOF

kubectl create -f network-admin-role.yaml

# Bind users in the network-admin group to the network-admin cluster role
kubectl create clusterrolebinding network-admin --clusterrole=network-admin --group=network-admin

kubectl config use-context network-admin
kubectl get networkpolicy

kubectl config use-context kubernetes-admin@kubernetes

# support network policies are Calico, Cilium, Weave Net and Romana
# flannel does not support network policies

kubectl get networkpolicy deny-metadata -o yaml --export 
kubectl explain networkpolicy.spec.egress
kubectl explain networkpolicy.spec.egress.to
# ipBlock, namespaceSelector, podSelector
kubectl explain networkpolicy.spec.egress.to.ipBlock

kubectl run busybox --image=busybox --rm -it /bin/sh
wget https://kubernetes.io
wget 169.254.169.254

# Retry connecting to the EC2 instance metadata endpoint using a container in a different namespace
kubectl create namespace test
kubectl run busybox --image=busybox --rm -it -n test /bin/sh
wget 169.254.169.254

# Extract AWS credentials using the metadata endpoint
role=$(wget -qO- 169.254.169.254/latest/meta-data/iam/security-credentials)
wget -qO- 169.254.169.254/latest/meta-data/iam/security-credentials/$role

# Create a network policy resource file that uses pod selectors to allow incoming connections 
# to a web server application tier from a cache tier
cat > app-policy.yaml <<EOF
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: app-tiers
  namespace: test
spec:
  podSelector:
    matchLabels:
      app-tier: web
  policyTypes:
  - Ingress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app-tier: cache
    ports:
    - port: 80
EOF

kubectl create -f app-policy.yaml

kubectl run web-server -n test -l app-tier=web --image=nginx:1.15.1 --port 80

# Create a busybox pod in the cache tier to test the app-tiers network policy
# Get the web server pod's IP address
web_ip=$(kubectl get pod -n test -o jsonpath='{.items[0].status.podIP}')
# Pass in the web server IP addpress as an environment variable
kubectl run busybox -n test -l app-tier=cache --image=busybox --env="web_ip=$web_ip" --rm -it /bin/sh
# Send a requst to the web server on port 80
wget $web_ip
exit

# Repeat the test, but using a pod that is not in the cache tier
kubectl run busybox -n test --image=busybox --env="web_ip=$web_ip" --rm -it /bin/sh
wget $web_ip

exit

kubectl delete deployment -n test web-server

# securityContext
kubectl explain pod.spec.securityContext
kubectl explain pod.spec.containers.securityContext

cat > pod.yaml <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: security-context-test-1
  namespace: test
spec:
  containers:
  - image: busybox
    name: busybox
    args:
    - sleep
    - "3600"
EOF

kubectl create -f pod.yaml
kubectl exec -n test security-context-test-1 -it -- ls /dev

kubectl delete -f pod.yaml

cat > pod.yaml <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: security-context-test-2
  namespace: test
spec:
  containers:
  - image: busybox
    name: busybox
    args:
    - sleep
    - "3600"
    securityContext:
      privileged: true
EOF

kubectl create -f pod.yaml

kubectl exec -n test security-context-test-2 -it -- /bin/sh
ls /dev

# Mount the host's file system and read a file from it
mkdir /hd
mount /dev/xvda1 /hd
cat /hd/etc/kubernetes/kubelet.conf
exit

kubectl delete -f pod.yaml

cat > pod.yaml <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: security-context-test-3
  namespace: test
spec:
  securityContext:
    runAsNonRoot: true
    runAsUser: 1000
    runAsGroup: 1000
  containers:
  - image: busybox
    name: busybox
    args:
    - sleep
    - "3600"
    securityContext:
      runAsUser: 2000
      readOnlyRootFilesystem: true
EOF

kubectl create -f pod.yaml

kubectl exec -n test security-context-test-3 -it -- /bin/sh

ps

touch /tmp/test-file

kubectl delete -f pod.yaml

# secrets
cat > pod.yaml <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: test
  namespace: test
spec:
  containers:
  - image: ubuntu:16.04
    name: ubuntu
    args:
    - sleep
    - "3600"
EOF

kubectl create -f pod.yaml

# relevant to secrets are the volumeMounts, serviceAccount, and volumes
kubectl get pod -n test test -o yaml --export

kubectl get secret --all-namespaces

# Install curl and send an authenticated request to the API server using the service account token
kubectl exec -n test test -it -- bash
ls /var/run/secrets/kubernetes.io/serviceaccount/
apt-get update
apt-get install -y curl
cd /var/run/secrets/kubernetes.io/serviceaccount/
curl --cacert ca.crt \
     --header "Authorization: Bearer $(cat token)" \
     https://kubernetes.default.svc/api

# Send a request to list all of the secrets in the test namespace
curl --cacert ca.crt \
     --header "Authorization: Bearer $(cat token)" \
     https://kubernetes.default.svc/api/v1/namespaces/test/secrets


kubectl delete -f pod.yaml

# Use kubectl to create a secret named app-secret in the test namespace
kubectl create secret generic app-secret -n test \
  --from-literal="our-secret=almost finished"

kubectl get secret -n test app-secret -o yaml --export

# Confirm the secret value is base-64 encoded by decoding it
kubectl get secret -n test app-secret -o jsonpath="{.data.our-secret}" \
  | base64 --decode \
  && echo

cat > pod.yaml <<EOF
apiVersion: v1
kind: Pod
metadata:
  name: test
  namespace: test
spec:
  containers:
  - image: busybox
    name: busybox
    args:
    - sleep
    - "3600"
    env:
    - name: OUR_SECRET      # Name of environment variable
      valueFrom:
        secretKeyRef:
          name: app-secret  # Name of secret
          key: our-secret   # Name of secret key
EOF

kubectl create -f pod.yaml

kubectl exec -n test test -- /bin/sh -c 'echo $OUR_SECRET'



