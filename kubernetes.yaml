##################################################################################
# Kubernetes Resources
##################################################################################
Docs: https://kubernetes.io/docs/home/
API: https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.17/#podspec-v1-core

Minikube: https://kubernetes.io/docs/tasks/tools/install-minikube/

kubeadm: https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm/

kind: https://kind.sigs.k8s.io/
kind is a tool for running local Kubernetes clusters using Docker container “nodes”.

kubespray: https://github.com/kubernetes-sigs/kubespray
Deploy a Production Ready Kubernetes Cluster

kops: https://github.com/kubernetes/kops
Kubernetes Operations (kops) - Production Grade K8s Installation, Upgrades, and Management

metrics-server: https://github.com/kubernetes-sigs/metrics-server
Cluster-wide aggregator of resource usage data. 

dashboard: https://github.com/kubernetes/dashboard
General-purpose web UI for Kubernetes clusters

autoscaler: https://github.com/kubernetes/autoscaler
Autoscaling components for Kubernetes

kustomize: https://github.com/kubernetes-sigs/kustomize
Customization of kubernetes YAML configurations

Helm: Helm helps you manage Kubernetes applications
Prometheus: An open-source monitoring system
Kubeflow: Kubeflow is a free and open-source machine learning platform
Knative: Kubernetes-based platform to build, deploy, and manage modern serverless workloads

Quick Start for Kubernetes by VMware
AWS: https://aws.amazon.com/quickstart/architecture/vmware-kubernetes/

kubeaudit: https://github.com/Shopify/kubeaudit
kubeaudit helps you audit your Kubernetes clusters against common security controls

##################################################################################
# Kubernetes - How to interact with kubernetes?
##################################################################################
One way     : Kubernetes REST API
Second way  : Kubernetes Client Libraries (Python, Go etc.)
Third way   : kubectl
Fourth way  : Kubernetes Web Dashboard

##################################################################################
# Installations
##################################################################################

# To check if virtualization is supported on macOS, run the following command on your terminal.
# If you see VMX in the output (should be colored), the VT-x feature is enabled in your machine.
sysctl -a | grep -E --color 'machdep.cpu.features|VMX' 

# minikube installation

curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 
chmod +x minikube 
sudo mv minikube /usr/local/bin/

# kubectl installation

curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl

# kops installation, for AWS

curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
chmod +x kops-linux-amd64
sudo mv kops-linux-amd64 /usr/local/bin/kops

# kubeadm installation, for other than AWS

##################################################################################
# minikube
##################################################################################

# Start a minikube 
minikube start --vm-driver=virtualbox
minikube status

# Start a single instance of hello-minikube and let the container expose port 8080 .
kubectl run hello-minikube --image=nginx --port=8080

# Expose deployment 
kubectl expose deployment hello-minikube --type=NodePort

# Start the service
minikube service hello-minikube --url

# Tearing down minikube
minikube stop

# Configs
~/.kube/config 

minikube start --vm-driver=virtualbox --extra-config=kubelet.authentication-token-webhook=true
minikube start --vm-driver=hyperkit  --network-plugin=cni --extra-config=kubelet.network-plugin=cni

minikube ip

##################################################################################
# kops dns troubleshooting
##################################################################################
sudo apt-get install dnsutils
dig NS niravk8s.com (Route53 hosted zone name)
sudo apt install bind9-host
host -t NS niravk8s.com

# if creating public Route53 Hosted Zone, then take the value of all NS records
# and update them in domain resgister admin panel, like namecheap or godaddy etc.

whois <domain_name>

# niravk8s.com purchased on godaddy/namecheap/AWS etc.
# niravk8s.com Route53 Hosted Zone has NS records, needs to be added to register provider
# demo.niravk8s.com Route53 Hosted Zone created
# demo.niravk8s.com Route53 Hosted Zone also has different NS records
# which needs to be added to niravk8s.com -> create Record Set -> Type as NS - Name Server
# and values as NS records fo demo.niravk8s.com

ssh-keygen -f ~/.ssh/kube_rsa
cat ~/.ssh/kube_rsa.pub

##################################################################################
# kops general commands
##################################################################################
kops create cluster --name=kubernetes.newtech.academy --state=s3://kops-state-b429bc --zones=eu-west-1a --node-count=2 --node-size=t2.micro --master-size=t2.micro --dns-zone=kubernetes.newtech.academy

kops update cluster kubernetes.newtech.academy --yes --state=s3://kops-state-b429bc
kops delete cluster --name kubernetes.newtech.academy --state=s3://kops-state-b429bc
kops delete cluster --name kubernetes.newtech.academy --state=s3://kops-state-b429bc --yes

##################################################################################
# Kubernetes Architecture - Kubernetes objects
##################################################################################
- Cluster
- Nodes: Master & Worker nodes
- Pod
- Service
- Namespace
- Deployment
- HorizontalPodAutoscaler
- Volumes: Volume, PersistentVolume, PersistentVolumeClaim
- ConfigMap
- Secret
- NetworkPolicy
- Ingress
- DaemonSet

##################################################################################
# Kubernetes Concepts
##################################################################################

- Service Discovery: Environment Variables based, DNS based
- Autoscaling: metric-server
- Updates: Rolling updates and rollbacks
- Probes: Liveness and Readiness probes
- Init Containers: pre-checks
- Taints and Tolerations
- NodeSelectors and Node Affinity
- Container Resource Requirements: requests, limits
- Static pods: Managed by kubelet, not API/Scheduler
- Custom Scheduling: kubectl explain deployment.spec.template.spec.schedulerName

# Updating Resources
- Imperative Paradigm
- Imperative with Configuration Files Paradigm
- Declarative with Configuration Files Paradigm

##################################################################################
# Kubernetes - Manifests
##################################################################################

# Pod
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
spec:

# Service
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:

# Namespaces
apiVersion: v1
kind: Namespace
metadata:
  name: microservice

# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-service
spec: # deployment spec
  template:
    spec: # pod spec

# Autoscaling
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: app-tier
spec:

# PersistentVolume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: data-tier-volume
spec:

# PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-tier-volume-claim
spec:

# ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
data:

# Secret
apiVersion: v1
kind: Secret
metadata:
  name: app-tier-secret
stringData: # unencoded data
data: # for base-64 encoded data

# NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: block-one-ip
spec:

# Ingress
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: simple-fanout-example
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:

# DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: fluentd-elasticsearch
  namespace: kube-system
  labels:
    k8s-app: fluentd-logging
spec:

##################################################################################
# Kubernetes - kubectl high level
##################################################################################
- kubectl explain ...
- kubectl create ...
- kubectl get ...
- kubectl describe ...
- kubectl delete ...
- kubectl logs ...
- kubectl apply ...
- kubectl scale ...
- kubectl rollout ...
- kubectl edit ...
- kubectl set ...
- kubectl patch ...
- kubectl run ...
- kubectl replace ...
- kubectl expose ...
- kubectl port-forward ...
- kubectl attach ..
- kubectl exec ...
- kubectl label ...
- kubectl config ...
- kubectl taint ...

##################################################################################
# Kubernetes - kubectl SHORTNAMES
##################################################################################
kubectl api-resources

nodes -> no
pods -> po
namespaces -> ns
persistentvolumes -> pv
persistentvolumeclaims -> pvc
services -> svc
deployments -> deploy
replicationcontrollers -> rc

serviceaccounts -> sa
daemonsets -> ds
replicasets -> rs
configmaps -> cm
endpoints -> ep
statefulsets -> sts
horizontalpodautoscalers -> hpa
networkpolicies -> netpol
podsecuritypolicies -> psp
ingresses -> ing
events -> ev
certificatesigningrequests -> csr

storageclasses -> sc
priorityclasses -> pc

cronjobs -> cj
resourcequotas -> quota

##################################################################################
# Kubernetes - kubectl other useful commands
##################################################################################
kubectl scale -n <namespace> deployment <deployment_name> --replicas=n
kubectl scale -n deployments deployment support-tier --replicas=5

kubectl delete -n deployments pods support-tier-54b9776994-vfdg7 --wait=false

kubectl get -n deployments pods -w

kubectl top pods -n deployments

kubectl autoscale deployment app-tier --max=5 --min=1 --cpu-percent=70

kubectl rollout -n deployments status deployment app-tier
kubectl rollout -n deployments pause deployment app-tier

kubectl get -n deployments deployments app-tier

kubectl rollout -n deployments resume deployment app-tier
kubectl rollout -n deployments undo deployment app-tier

kubectl logs -n probes app-tier-74bcc6f989-4zgzg | cut -d' ' -f5,8-11
kubectl logs -n volumes support-tier-554465974c-nstvq poller --tail=1

kubectl exec -n deployments data-tier-5c79c59f7b-zzkpj -it /bin/bash

kubectl exec -n config data-tier-86d9b5797c-dqtkx cat /etc/redis/redis.conf
kubectl edit -n config configmap redis-config
kubectl exec -n config data-tier-86d9b5797c-dqtkx cat /etc/redis/redis.conf
kubectl exec -n config data-tier-86d9b5797c-dqtkx redis-cli CONFIG GET tcp-keepalive
kubectl rollout -n config restart deployment data-tier
kubectl exec -n config data-tier-dc8c4fb64-9fcrc redis-cli CONFIG GET tcp-keepalive

kubectl exec -n legacy app -- cat /metrics/raw.txt
kubectl exec -n legacy adapted-pod --container=adapter -- cat /metrics/adapted.json

# [solved] Calico doesn't work with minikube
# Ref: https://github.com/projectcalico/calico/issues/1456

minikube start --vm-driver=hyperkit  --network-plugin=cni --extra-config=kubelet.network-plugin=cni
curl -O -L https://docs.projectcalico.org/v3.2/getting-started/kubernetes/installation/hosted/etcd.yaml
# ValidationError(DaemonSet.spec): missing required field "selector" in io.k8s.api.apps.v1.DaemonSetSpec
kubectl apply -f etcd.yaml
curl -O -L https://docs.projectcalico.org/v3.2/getting-started/kubernetes/installation/rbac.yaml
kubectl apply -f rbac.yaml
curl -O -L https://docs.projectcalico.org/v3.2/getting-started/kubernetes/installation/hosted/calico.yaml
sed -i -e "s/10\.96\.232\.136/$(kubectl get service -o json --namespace=kube-system calico-etcd | jq  -r .spec.clusterIP)/" calico.yaml
# no matches for kind "DaemonSet" in version "extensions/v1beta1"
# no matches for kind "Deployment" in version "extensions/v1beta1"
# Invalid value: map[string]string{"k8s-app":"calico-kube-controllers"}: `selector` does not match template `labels`
kubectl apply -f calico.yaml
kubectl get service -o jsonpath='{.spec.clusterIP}' --namespace=kube-system calico-etcd

kubectl get pods -n network-policy -L app,region

kubectl logs -n network-policy --tail=1 -f client-1
kubectl logs -n network-policy --tail=1 -f client-2

kubectl exec -n network-policy server -it ping 192.168.120.67
kubectl exec -n network-policy server -it ping 192.168.120.69

kubectl describe -n kube-system clusterrole system:coredns
kubectl get -n kube-system pod coredns-6955765f44-7rkjb -o yaml | less

# service accounts can also provide a convenient way to store image pull secrets.

##################################################################################
# Kubernetes - kubectl tips and tricks
##################################################################################

# Shell completions
kubectl | grep completion
kubectl completion -h
source <(kubectl completion zsh)
kubectl completion zsh > "${fpath[1]}/_kubectl"

# get Tricks
kubectl get po -n network-policy --show-labels
kubectl get po -n kube-system -L k8s-app
kubectl get po -n kube-system -l k8s-ap
kubectl get po -n kube-system -L k8s-app -l k8s-app
kubectl get po -n kube-system -L k8s-app -l k8s-app=kube-dns
kubectl get po -n kube-system -L k8s-app -l k8s-app!=kube-dns
kubectl get po -n kube-system -L k8s-app -l k8s-app!=kube-dns,k8s-app

kubectl get po -n kube-system kube-proxy-zsrnj --output=yaml
kubectl get po -n kube-system kube-proxy-zsrnj -o=yaml
kubectl get po -n kube-system kube-proxy-zsrnj -o=yaml | wc -l
kubectl get po -n kube-system kube-proxy-zsrnj -o=yaml --export | wc -l
kubectl get po -n kube-system --sort-by='{.status.podIP}'
kubectl get po -n kube-system --sort-by='{.metadata.creationTimestamp}'
kubectl get po -n kube-system --sort-by='{.status.podIP}' -o wide
kubectl get po -n kube-system --sort-by='{.status.podIP}' -o jsonpath='{.items[*].status.podIP}'
kubectl get po -n kube-system --sort-by='{.status.podIP}' \
 -o jsonpath='{range .items[*]}{.metadata.name}{"\t"}{.status.podIP}{"\n"}{end}'

# Generating Manifests
kubectl create namespace tips -o yaml --dry-run
kubectl create namespace tips -o yaml --dry-run > tips/1-namespace.yaml
kubectl run nginx --image=nginx --port=80 --replicas=2 --expose --dry-run -o yaml > tips/2-deployment.yaml
kubectl get deploy -n tips nginx -o yaml --export > deployment.yaml

# Explaining Fields
kubectl explain pods
kubectl explain pods.spec
kubectl explain pods.spec.containers
kubectl explain pods.spec.containers.readinessProbe
kubectl explain pods.spec.containers.readinessProbe.httpGet
kubectl explain pods.spec.containers.readinessProbe.httpGet.path

kubectl explain pods.spec.containers --recursive | less

kubectl taint nodes node1 key=value:NoSchedule
kubectl taint nodes node01 spray=mortein:NoSchedule

kubectl label nodes <node-name> <label-key>=<label-value>

# For secrets
echo –n 'mysql' | base64
echo –n '4oCTbiBteXNxbAo=' | base64 --decode

